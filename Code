import cv2
import os
from ultralytics import YOLO

def crop_and_save_labels(image_path, detections, output_dir):
    image = cv2.imread(image_path)
    os.makedirs(output_dir, exist_ok=True)
    
    x_min, y_min, x_max, y_max = map(int, box.xyxy[0])
        label = int(box.cls[0])
        cropped_image = image[y_min:y_max, x_min:x_max]
        output_path = os.path.join(output_dir, f"label_{label}_{idx}.png")
        cv2.imwrite(output_path, cropped_image)

# Load YOLOv8 model
model = YOLO('path_to_your_trained_model.pt')

# Path to the image you want to process
image_path = 'path_to_your_image.jpg'
output_dir = 'path_to_save_cropped_labels'

# Perform detection
results = model(image_path)

# Crop and save detected labels
crop_and_save_labels(image_path, results[0].boxes, output_dir)







import cv2
import os
import numpy as np
from ultralytics import YOLO

def crop_and_save_segmented_labels(image_path, masks, labels, output_dir):
    image = cv2.imread(image_path)
    os.makedirs(output_dir, exist_ok=True)
    
    for idx, (mask, label) in enumerate(zip(masks, labels)):
        # Find contours of the mask
        contours, _ = cv2.findContours(mask.astype(np.uint8), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        x, y, w, h = cv2.boundingRect(contours[0])
        
        # Crop the image using the bounding box
        cropped_image = image[y:y+h, x:x+w]
        output_path = os.path.join(output_dir, f"label_{label}_{idx}.png")
        cv2.imwrite(output_path, cropped_image)

# Load YOLOv8 segmentation model
model = YOLO('path_to_your_trained_segmentation_model.pt')

# Path to the image you want to process
image_path = 'path_to_your_image.jpg'
output_dir = 'path_to_save_cropped_labels'

# Perform segmentation
results = model(image_path)

# Extract masks and labels
masks = results[0].masks.data.numpy()
labels = results[0].masks.labels

# Crop and save segmented labels
crop_and_save_segmented_labels(image_path, masks, labels, output_dir)





import cv2
import os
from ultralytics import YOLO

# Define the class labels
class_labels = ['person', 'bicycle', 'car']  # Add your actual class labels

def crop_and_save_labels(image_path, results, output_dir):
    image = cv2.imread(image_path)
    os.makedirs(output_dir, exist_ok=True)
    
    # Iterate over each detection
    for idx, detection in enumerate(results.boxes):
        x_min, y_min, x_max, y_max = map(int, detection.xyxy[0])
        label_index = int(detection.cls[0])
        label = class_labels[label_index]
        cropped_image = image[y_min:y_max, x_min:x_max]
        output_path = os.path.join(output_dir, f"{label}_{idx}.png")
        cv2.imwrite(output_path, cropped_image)

# Load YOLOv8 model
model = YOLO('path_to_your_trained_model.pt')

# Path to the image you want to process
image_path = 'path_to_your_image.jpg'
output_dir = 'path_to_save_cropped_labels'

# Perform detection
results = model(image_path)

# Crop and save detected labels
crop_and_save_labels(image_path, results[0], output_dir)







import cv2
import os
import numpy as np
from ultralytics import YOLO

# Define the class labels
class_labels = ['person', 'bicycle', 'car']  # Add your actual class labels

def crop_and_save_segmented_labels(image_path, results, output_dir):
    image = cv2.imread(image_path)
    os.makedirs(output_dir, exist_ok=True)
    
    masks = results.masks.data.numpy()  # Get the masks as numpy arrays
    labels = results.masks.cls.numpy()  # Get the corresponding labels

    for idx, (mask, label_index) in enumerate(zip(masks, labels)):
        label = class_labels[int(label_index)]
        
        # Convert mask to binary format
        binary_mask = (mask > 0.5).astype(np.uint8) * 255

        # Find contours of the binary mask
        contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if contours:
            x, y, w, h = cv2.boundingRect(contours[0])
            cropped_image = image[y:y+h, x:x+w]
            output_path = os.path.join(output_dir, f"{label}_{idx}.png")
            cv2.imwrite(output_path, cropped_image)

# Load YOLOv8 segmentation model
model = YOLO('path_to_your_trained_segmentation_model.pt')

# Path to the image you want to process
image_path = 'path_to_your_image.jpg'
output_dir = 'path_to_save_cropped_labels'

# Perform segmentation
results = model(image_path)

# Crop and save segmented labels
crop_and_save_segmented_labels(image_path, results[0], output_dir)

