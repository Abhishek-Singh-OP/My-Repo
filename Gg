import requests
import json
import re

# Allowed set of numbers after DIN-1451-H
allowed_numbers = {'1,6', '2', '3', '4', '5', '6', '8', '10', '16', '20'}

# Threshold for vertical distance to consider lines as part of the same label
vertical_distance_threshold = 10  # Adjust based on your data

# Function to upload image and get OCR results from the API
def upload_image_and_get_text(api_url, image_path):
    files = {'image': (image_path, open(image_path, 'rb'), 'image/png')}
    headers = {'Accept': 'application/json'}
    response = requests.post(api_url, files=files, headers=headers)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch data from API. Status Code: {response.status_code}")
        return None

# Function to group lines based on vertical positioning
def group_lines_by_position(lines, threshold):
    grouped_lines = []
    current_group = [lines[0]]

    for i in range(1, len(lines)):
        current_line = lines[i]
        previous_line = lines[i - 1]

        # Calculate vertical distance
        vertical_distance = current_line['bbox'][1] - previous_line['bbox'][3]

        if vertical_distance < threshold:
            current_group.append(current_line)
        else:
            grouped_lines.append(current_group)
            current_group = [current_line]

    grouped_lines.append(current_group)
    return grouped_lines

# Function to concatenate grouped lines into single strings
def concatenate_grouped_lines(grouped_lines):
    concatenated_texts = [' '.join(line['text'] for line in group) for group in grouped_lines]
    return concatenated_texts

# Function to validate extracted texts
def validate_texts(concatenated_texts):
    for text in concatenated_texts:
        if 'DIN 1451' in text:
            # Check for H followed by allowed numbers
            din_match = re.search(r'DIN\s1451.*?H\s*([=\-]?)\s*(\d+,\d+|\d+)', text)
            if din_match:
                number = din_match.group(2)
                if number not in allowed_numbers:
                    print(f"Invalid number after DIN-1451-H: {number} in text: {text}")
            else:
                print(f"Missing or malformed DIN-1451-H number in text: {text}")
        
        if 'ISO 3097-BVL' in text and 'MBN' in text:
            print(f"Invalid combination of ISO 3097-BVL and MBN in text: {text}")

# Main function to execute the workflow
def main():
    api_url = 'http://53.217.48.242:8000/ocr/paddle'
    image_path = 'path/to/your/image.png'
    
    response_data = upload_image_and_get_text(api_url, image_path)
    
    if response_data:
        lines = [{'text': item['text'], 'bbox': item['bbox']} for item in response_data]
        
        # Group lines by position
        grouped_lines = group_lines_by_position(lines, vertical_distance_threshold)
        
        # Concatenate grouped lines
        concatenated_texts = concatenate_grouped_lines(grouped_lines)
        
        # Validate texts
        validate_texts(concatenated_texts)

if __name__ == "__main__":
    main()
