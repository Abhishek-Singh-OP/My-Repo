import cv2
import os
import numpy as np
from ultralytics import YOLO

# Define the class labels
class_labels = ['person', 'bicycle', 'car']  # Add your actual class labels

def crop_and_save_segmented_labels(image_path, results, output_dir):
    image = cv2.imread(image_path)
    os.makedirs(output_dir, exist_ok=True)
    
    # Extract segmentation masks and their corresponding class IDs
    masks = results.segmentation  # Get the segmentation masks
    class_ids = results.pred[0]['class_ids']  # Get the corresponding class IDs
    
    for idx, (mask, class_id) in enumerate(zip(masks, class_ids)):
        label = class_labels[int(class_id)]
        
        # Convert mask to binary format
        binary_mask = (mask > 0.5).astype(np.uint8) * 255

        # Find contours of the binary mask
        contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if contours:
            x, y, w, h = cv2.boundingRect(contours[0])
            cropped_image = image[y:y+h, x:x+w]
            output_path = os.path.join(output_dir, f"{label}_{idx}.png")
            cv2.imwrite(output_path, cropped_image)

# Load YOLOv8 segmentation model
model = YOLO('path_to_your_trained_segmentation_model.pt')

# Path to the image you want to process
image_path = 'path_to_your_image.jpg'
output_dir = 'path_to_save_cropped_labels'

# Perform segmentation
results = model(image_path)

# Crop and save segmented labels
crop_and_save_segmented_labels(image_path, results, output_dir)
